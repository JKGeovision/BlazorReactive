@using BlazorReactive.ViewModels;
@using ReactiveUI;
@using ReactiveUI.Blazor;
@implements IViewFor<BodyViewModel>;
@implements IDisposable;

@if (ViewModel != null)
{
	<div style="display: flex; flex-direction: row; gap: 1rem;">
		<BodySidebar BodyViewModel="@ViewModel" />
		<div style="display: flex; flex-direction: column; gap: 1rem;">
			@foreach (string item in ViewModel.FilteredItems)
			{
				<div>@item</div>
			}
		</div>
	</div>
}

@code {

	[Parameter]
	public BodyViewModel? ViewModel { get; set; }

	object? IViewFor.ViewModel { get => ViewModel; set => ViewModel = (BodyViewModel?)value; }

	private bool _reactive = true; // false setzen, damit die Liste nicht bei Änderungen neu gerendert wird

	private IDisposable? _filteredItemsSubscription;

	protected override void OnParametersSet()
	{
		if (_reactive && _filteredItemsSubscription == null)
		{
			_filteredItemsSubscription = ViewModel
				.WhenAnyValue(x => x.FilteredItems)
				.Subscribe(_ =>
				{
					StateHasChanged();
				});
		}

		base.OnParametersSet();
	}

	public void Dispose()
	{
		_filteredItemsSubscription?.Dispose();
	}

}
